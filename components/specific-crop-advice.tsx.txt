import React, { useState } from 'react';
import { Search, Target, Zap, AlertTriangle, CheckCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';

export function SpecificCropAdvice() {
  const [cropName, setCropName] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [showAdvice, setShowAdvice] = useState(false);

  const handleAnalysis = () => {
    setIsAnalyzing(true);
    setTimeout(() => {
      setIsAnalyzing(false);
      setShowAdvice(true);
    }, 2000);
  };

  const advice = {
    crop: 'Tomatoes',
    suitability: 'Challenging but possible',
    challenges: [
      'Phosphorus levels below optimal (45% - needs 60%+)',
      'Soil temperature slightly low for optimal growth',
      'pH level acceptable but could be improved'
    ],
    solutions: [
      {
        issue: 'Low Phosphorus',
        solution: 'Apply Triple Super Phosphate (TSP) at 150kg/hectare',
        priority: 'High'
      },
      {
        issue: 'Temperature',
        solution: 'Use black plastic mulch to increase soil temperature',
        priority: 'Medium'
      },
      {
        issue: 'pH Optimization',
        solution: 'Apply lime at 200kg/hectare to raise pH to 6.5-7.0',
        priority: 'Low'
      }
    ],
    fertilizers: [
      { name: 'Triple Super Phosphate (TSP)', amount: '150 kg/hectare', timing: 'Before planting' },
      { name: 'NPK (15-15-15)', amount: '200 kg/hectare', timing: 'Split application' },
      { name: 'Calcium Nitrate', amount: '100 kg/hectare', timing: 'During flowering' }
    ],
    expectedYield: '25-30 tons/hectare (with improvements)',
    timeline: '90-120 days to harvest'
  };

  return (
    <section className="py-20 bg-muted/30">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold text-foreground mb-4">
            Specific Crop Optimization
          </h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Already know what you want to grow? Get AI-powered advice on how to optimize your land 
            conditions for your chosen crop, regardless of current soil limitations.
          </p>
        </div>

        <div className="max-w-4xl mx-auto">
          <Card className="mb-8">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Target className="h-6 w-6 mr-2 text-primary" />
                Crop-Specific Analysis
              </CardTitle>
              <CardDescription>
                Enter the crop you want to grow and get personalized optimization recommendations
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex gap-4">
                <div className="flex-1">
                  <Label htmlFor="crop">Crop Name</Label>
                  <Input
                    id="crop"
                    placeholder="e.g., Tomatoes, Rice, Potatoes, Wheat..."
                    value={cropName}
                    onChange={(e) => setCropName(e.target.value)}
                    className="mt-2"
                  />
                </div>
                <div className="flex items-end">
                  <Button 
                    onClick={handleAnalysis}
                    disabled={!cropName || isAnalyzing}
                    className="bg-primary hover:bg-primary/90"
                  >
                    {isAnalyzing ? (
                      <>
                        <Search className="h-4 w-4 mr-2 animate-spin" />
                        Analyzing...
                      </>
                    ) : (
                      <>
                        <Search className="h-4 w-4 mr-2" />
                        Get Advice
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {showAdvice && (
            <div className="space-y-6">
              <Card className="border-2 border-primary/20">
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <span className="flex items-center">
                      <Target className="h-5 w-5 mr-2 text-primary" />
                      {advice.crop} Optimization Plan
                    </span>
                    <Badge variant="outline" className="text-sm">
                      {advice.suitability}
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-semibold mb-3 flex items-center text-destructive">
                        <AlertTriangle className="h-4 w-4 mr-2" />
                        Current Challenges
                      </h4>
                      <ul className="space-y-2">
                        {advice.challenges.map((challenge, i) => (
                          <li key={i} className="text-sm text-muted-foreground flex items-start">
                            <span className="w-2 h-2 bg-destructive rounded-full mt-2 mr-2 flex-shrink-0"></span>
                            {challenge}
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    <div>
                      <h4 className="font-semibold mb-3">Expected Results</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span>Expected Yield:</span>
                          <span className="font-medium text-accent">{advice.expectedYield}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Timeline:</span>
                          <span className="font-medium">{advice.timeline}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Zap className="h-5 w-5 mr-2 text-accent" />
                    Optimization Solutions
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {advice.solutions.map((solution, i) => (
                      <div key={i} className="p-4 border rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <h5 className="font-semibold">{solution.issue}</h5>
                          <Badge 
                            variant={solution.priority === 'High' ? 'destructive' : solution.priority === 'Medium' ? 'default' : 'secondary'}
                          >
                            {solution.priority}
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground flex items-start">
                          <CheckCircle className="h-4 w-4 mr-2 text-accent flex-shrink-0" />
                          {solution.solution}
                        </p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Recommended Fertilizer Schedule</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {advice.fertilizers.map((fertilizer, i) => (
                      <div key={i} className="flex items-center justify-between p-4 bg-muted rounded-lg">
                        <div>
                          <h6 className="font-medium">{fertilizer.name}</h6>
                          <p className="text-sm text-muted-foreground">{fertilizer.timing}</p>
                        </div>
                        <Badge variant="outline" className="text-sm">
                          {fertilizer.amount}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </div>
    </section>
  );
}